At the end of the week, your team will submit a Final Report that describes the following:
* *E*xtract: your original data sources and how the data was formatted (CSV, JSON, pgAdmin 4, etc).
* *T*ransform: what data cleaning or transformation was required.
* *L*oad: the final database, tables/collections, and why this was chosen.


Extract:
Election data source - https://www.elections.il.gov/ElectionOperations/DownloadVoteTotals.aspx?MID=vvc3ru6lLPI%3d&T=637675652614231245 (CSV format)
Census data source - https://www.census.gov/data/developers/data-sets/acs-5year.html (JSON format)

Transform:
Election - (Cleaning)
	1. Dropped the following columns: 
		-"CanAffilCommit" as it was empty
		-"Election" as it was constant
		-"VoteFor" as it was also constant
		-"PartyAbbrev" as there is a "PartyName" column
		-"OfficeSequence" as there is an "OfficeName" column 
	2. Inspected NaN values, and made the following changes:
		- PartyName null values corresponding to Judge Retain votes became "NON-PARTISAN"
		- Some PartyName null values in 2014 had CanFirstName nulls in the same row, 
		and corresponded to constitutional amendment and other proposal votes.
			-PartyName became "NON-PARTISAN" and CanFirstName became "AMENDMENT" 
			and "PROPOSITION", respectively. 
		- Other PartyName null values, all corresponding to write-in candidates, 
		became "WRITE IN"
			-The write-in information came from our source website
	3. Fixed inconsistencies in CanLastName values:
		-Some names such as McCann were formatted "McCANN", while every other name was 
		fully capitalized, so any name with a lower-case character became entirely uppercase
	
- (Transforming)
	1. Split each of the three .csv files into three:
		-candidate, ballotgroup, and votes tables
		-candidate has columns CandidateID, CanFirstName, CanLastName, PartyName, and
		OfficeName, with CandidateID as primary key
		-ballotgroup has columns BallotGroup, OfficeName, and a new column, 
		NumberRunning, which gives the number of candidates running for each office
			-ballotgroup has a composite primary key of BallotGroup and OfficeName
		-votes has columns CandidateID, County, and Votes, with CandidateID and 
		County acting as composite primary key
		-exported the nine total tables to .csv files

Census - 
	1. Rename columns from their census code to plain English.
	2. Split the name column (e.g. Adams County, Illinois) into two columns with the county name and state name.
	3. Add a column called census_year identifying what census the information relates to.
	4. Join all three census data frames into a single data frame.
	5. Created a dataframe of county name and county id from unique values in the census dataframe. 

Load:
(census) Tables - Census, County_ID
(election) Tables - candidates10, 14, and 18, ballotgroup10, 14, and 18, and vote10, 14 and 18

After transformation, we loaded the data into a relational database.  The census data was split into two tables: One with the county and county id and the other with household income, population, median age, income per capita, poverty count, county id, census year, and county name.  This is the data that will be used against the election data to look for trends.

The voting data came from three seperate years.  Each was split into three tables.  The candidates table contains candidate id, first name, last name, party name, and office name.  The votes table contains candidate id, county, and number of votes.  The ballot groups table contains the ballot group and the office name.
